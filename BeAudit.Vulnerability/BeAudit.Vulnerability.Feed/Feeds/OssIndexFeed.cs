using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using BeAudit.Package.Enumerations;
using BeAudit.Package.Interfaces;
using BeAudit.Vulnerability.Interfaces;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace BeAudit.Vulnerability.Feed.Feeds
{
    internal class OssIndexFeed: BaseFeed, IVulnerabilityFeed
    {
        // The base uri 
        private Uri BaseUri => GetUriBuilder().Uri;
       
        // The platforms the package supports
        private readonly ICollection<PackageManager> supportedPlatforms = 
            new List<PackageManager>() {PackageManager.Bower, PackageManager.Chocolatey};

        public ICollection<PackageManager> SupportedPlatforms => supportedPlatforms;

        public OssIndexFeed()
        {
            client = new HttpClient();
        }

        private string CreateRequestBody(IEnumerable<IPackageIdentifier> packages)
        {
            StringBuilder body = new StringBuilder("{\"coordinates\": ");

            body.Append(JsonConvert.SerializeObject(packages.Select(i => i.Coordinates)));

            body.Append("}");

            return body.ToString();
        }

        private HttpRequestMessage CreateRequest(IEnumerable<IPackageIdentifier> packages)
        {
            return new HttpRequestMessage()
            {
                Method = HttpMethod.Post,
                RequestUri = BaseUri,
                Content = new StringContent(CreateRequestBody(packages), Encoding.UTF8, "application/json")
            };
        }

        private UriBuilder GetUriBuilder()
        {
            return new UriBuilder("https://ossindex.sonatype.org/api/v3/component-report"); 
        }

        public async Task<IEnumerable<IVulnerability>> GetVulnerabilities(IEnumerable<IPackageIdentifier> packages)
        {
            HttpResponseMessage response = await client.SendAsync(CreateRequest(packages));
            return await ParseResponse(response);
        }

        private async Task<IEnumerable<IVulnerability>> ParseResponse(HttpResponseMessage response)
        {
            Stream body = await response.Content.ReadAsStreamAsync();

            string test = await response.Content.ReadAsStringAsync();
            JsonReader reader = new JsonTextReader(new StreamReader(body));
            
            //TODO: Support deserializing multiple with batching
            while (reader.Read())
            {
                if (!reader.Path.Contains("vulnerabilities") || 
                    reader.TokenType != JsonToken.StartArray)
                    continue;

                return JArray.Load(reader).Children().Select(i => i.ToObject<OssIndexVulnerability>());
            }
           
            return new List<IVulnerability>();
        }
        
        public Task<IEnumerable<IVulnerability>> GetVulnerabilities(IPackageIdentifier packageIdentifier)
        {
            /* TODO: Enable Batching
             if (packagesToQuery == null)
                packagesToQuery = new Queue<IPackageIdentifier>();
            
            packagesToQuery.Enqueue(packageIdentifier);*/

            // Temporary until batching implemented
            return GetVulnerabilities(new List<IPackageIdentifier>() {packageIdentifier});

        }
    }
}